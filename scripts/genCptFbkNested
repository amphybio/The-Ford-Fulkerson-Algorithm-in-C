#!/bin/bash

#===============================================================================
#
#          FILE:  ---
#
#         USAGE:  ---
#
#   DESCRIPTION:
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  ---
#       COMPANY:  ---
#       VERSION:  ---
#       CREATED:  ---
#      REVISION:  ---
#===============================================================================
{
  #$1 FONTE
  #$2 SORVEDOURO
  #$3 ARQUIVO

  infile=$3

  alfaList=($(awk NR==1 "$infile"))

  nDiv=$4
  const3=$(awk "BEGIN {print ${alfaList[3]} / $nDiv}")
  const4=$(awk "BEGIN {print (1 - ${alfaList[4]}) / $nDiv}")

  a6=$(awk "BEGIN {print ${alfaList[0]} * (2 + ${alfaList[3]} - ${alfaList[4]} - ${alfaList[5]})}")
  a7=$(awk "BEGIN {print ${alfaList[0]} * (1 - ${alfaList[1]} - ${alfaList[2]})}")

  for (( i=$nDiv; i>=0; i--))
  do
    if [[ $i -eq 0 ]]
    then
        alfaList[3]=0
        alfaList[4]=1
    fi
    awk NR==2 "$infile" > network_"$i".in
    awk NR==3 "$infile" >> network_"$i".in
    awk "NR>3" "$infile" > auxFile.in

    while read line
    do
      cpt=-1
      lengthLine=$(echo "$line" | awk '{n=split($0, array, " ")} END{print n }')
      firstAlfa=$(echo "$line" | awk '{print $3}')
      if [[ $lengthLine -eq 3 ]]
      then
          if [[ $firstAlfa -gt 0 ]]
          then
              cpt=$(awk "BEGIN {print ${alfaList[0]} * ${alfaList[$firstAlfa]}}")
          else
            cpt=$(awk "BEGIN {print ${alfaList[0]} * (1 - ${alfaList[($firstAlfa * -1)]})}")
          fi
      elif [[ $lengthLine -eq 4 ]]
      then
          secondAlfa=$(echo "$line" | awk '{print $4}')
          if [[ $firstAlfa -gt 0 ]]
          then
              cpt=$(awk "BEGIN {print ${alfaList[0]} * (1 + ${alfaList[$firstAlfa]} - ${alfaList[$secondAlfa]})}")
          else
            cpt=$(awk "BEGIN {print ${alfaList[0]} * (1 - ${alfaList[($firstAlfa * -1)]} - ${alfaList[$secondAlfa]})}")
          fi
      elif [[ $lengthLine -eq 5 ]] # <<< AQUI
      then
          secondAlfa=$(echo "$line" | awk '{print $4}')
          thirdAlfa=$(echo "$line" | awk '{print $5}')
          if [[ $thirdAlfa -eq "a6" ]]
          then
              beta3=$(awk "BEGIN {print ((${alfaList[$secondAlfa]}-1)^(1/4))/$a6}")
              constA6=$(awk "BEGIN {print 1 / (1 + ($beta3 * $a6)^4)}")
              if [[ $firstAlfa -gt 0 ]]
              then
                  cpt=$(awk "BEGIN {print ${alfaList[0]} * ${alfaList[$firstAlfa]} * $constA6}")
              else
                cpt=$(awk "BEGIN {print ${alfaList[0]} * (1 - ${alfaList[($firstAlfa * -1)]}) * $constA6}")
              fi
          else
            if [[ $firstAlfa -gt 0 ]]
            then
                cpt=$(awk "BEGIN {print ${alfaList[0]} * ${alfaList[$firstAlfa]} * (1 + ${alfaList[$secondAlfa]} - ${alfaList[$thirdAlfa]})}")
            else
              cpt=$(awk "BEGIN {print ${alfaList[0]} * (1 - ${alfaList[($firstAlfa * -1)]}) * (1 + ${alfaList[$secondAlfa]} - ${alfaList[$thirdAlfa]})}")
            fi
          fi
      else # <<< AQUI
        secondAlfa=$(echo "$line" | awk '{print $4}')
        thirdAlfa=$(echo "$line" | awk '{print $5}')

        beta1=$(awk "BEGIN {print ((${alfaList[$secondAlfa]}-1)^(1/4))/$a7}")
        beta2=$(awk "BEGIN {print ((${alfaList[$thirdAlfa]}-1)^(1/4))/$a6}")
        constA6=$(awk "BEGIN {print 1 / (1 + ($beta2 * $a6)^4)}")
        constA7=$(awk "BEGIN {print 1 / (1 + ($beta1 * $a7)^4)}")

        cpt=$(awk "BEGIN {print ${alfaList[0]} * ${alfaList[$firstAlfa]} * $constA6 * $constA7}")
      fi
      cpt=$(echo $cpt | awk '{printf "%.0f", $1}')
      if [[ $cpt != 0 ]]
      then
        n1=$(echo "$line" | awk '{print $1}')
  	    n2=$(echo "$line" | awk '{print $2}')
        echo $n1 $n2 $cpt >> network_"$i".in
      fi
    done < "auxFile.in"

    ./Ford_Fulkerson < network_"$i".in > networkFlow_"$i".dat
    alfaList[3]=$(awk "BEGIN {print ${alfaList[3]} - $const3}")
    alfaList[4]=$(awk "BEGIN {print ${alfaList[4]} + $const4}")
  done
  rm -rf aux*
  paste *.dat | column -s $'\t' -tn > networkNested.dat
}
