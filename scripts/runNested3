#!/bin/bash

#===============================================================================
#
#          FILE:  ---
#
#         USAGE:  ---
#
#   DESCRIPTION:
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  ---
#       COMPANY:  ---
#       VERSION:  ---
#       CREATED:  ---
#      REVISION:  ---
#===============================================================================
#
{
  #$1 FONTE
  #$2 SORVEDOURO
  #$3 ARQUIVO
  contA=1
  while read line
  do
    cp -rf "$3" base-aux.in
    if [ $contA -eq 1 ]
    then
        read line
        ((contA++))
    fi
    n1A=$(echo "$line" | awk '{print $1}')
    n2A=$(echo "$line" | awk '{print $2}')
    n3A=$(echo "$line" | awk '{print $3}')
    if [[ $n1A != $1 && $n2A != $2 ]]
    then
        contB=1
        while read line
        do
          cp -rf base-aux.in baux.in
          if [ $contB -eq 1 ]
          then
              read line
              ((contB++))
          fi
          n1B=$(echo "$line" | awk '{print $1}')
          n2B=$(echo "$line" | awk '{print $2}')
          n3B=$(echo "$line" | awk '{print $3}')
          if [[ $n1B != $1 && $n2B != $2 ]] && [[ $n1A != $n1B || $n2A != $n2B ]]
          then
              contC=1
              while read line
              do
                cp -rf baux.in baux3.in
                if [ $contC -eq 1 ]
                then
                    read line
                    ((contC++))
                fi
                n1C=$(echo "$line" | awk '{print $1}')
                n2C=$(echo "$line" | awk '{print $2}')
                n3C=$(echo "$line" | awk '{print $3}')
                if [[ $n1C != $1 && $n2C != $2 ]] && [[ $n1A != $n1C || $n2A != $n2C ]] && [[ $n1B != $n1C || $n2B != $n2C ]]
                then
                    if [ ! -f "$n1A"_"$n2A"-"$n1C"_"$n2C"-"$n1B"_"$n2B".dat ] && [ ! -f "$n1A"_"$n2A"-"$n1C"_"$n2C"-"$n1B"_"$n2B".dat ] && [ ! -f "$n1B"_"$n2B"-"$n1C"_"$n2C"-"$n1A"_"$n2A".dat ] && [ ! -f "$n1B"_"$n2B"-"$n1A"_"$n2A"-"$n1C"_"$n2C".dat ] && [ ! -f "$n1C"_"$n2C"-"$n1A"_"$n2A"-"$n1B"_"$n2B".dat ] && [ ! -f "$n1C"_"$n2C"-"$n1B"_"$n2B"-"$n1A"_"$n2A".dat ]
                    then
                        count=0
                        zero=0
                        if [[ $n3A -lt $n3B && $n3A -lt $n3C ]]
                        then
                          zero=1
                          count=$n3A
                        elif [[ $n3B -lt $n3A && $n3B -lt $n3C ]]
                        then
                          zero=2
                          count=$n3B
                        else
                          zero=3
                          count=$n3C
                        fi
                        cpd=$(( n3A + n3B + n3C ))
                        flA=$n3A
                        flB=$n3B
                        flC=$n3C
                        jA=$n3A
                        jB=$n3B
                        jC=$n3C
                        for (( i=$count; i>0; i--))
                        do
                          pct=($( awk "BEGIN { print (($jA + $jB + $jC) / $cpd ) * 100 }"))
                          sed -i "s/$n1A $n2A $flA/$n1A $n2A $jA/" baux3.in
                          sed -i "s/$n1B $n2B $flB/$n1B $n2B $jB/" baux3.in
                          sed -i "s/$n1C $n2C $flC/$n1C $n2C $jC/" baux3.in
                          ./Ford_Fulkerson < baux3.in > temp"$i".dat
                          flw=($(sed -n 's/^total flow is//p' temp"$i".dat))
                          echo $pct $'\t' $flw >> "$n1A"_"$n2A"-"$n1B"_"$n2B"-"$n1C"_"$n2C".dat
                          flA=$jA
                          ((jA--))
                          flB=$jB
                          ((jB--))
                          flC=$jC
                          ((jC--))
                        done
                        if [ $zero -eq 1 ]
                        then
                          jA=0
                          sed -i "/$n1A $n2A $flA/d" baux3.in
                          sed -i "s/$n1B $n2B $flB/$n1B $n2B $jB/" baux3.in
                          sed -i "s/$n1C $n2C $flC/$n1C $n2C $jC/" baux3.in
                        elif [ $zero -eq 2 ]
                        then
                          jB=0
                          sed -i "/$n1B $n2B $flB/d" baux3.in
                          sed -i "s/$n1A $n2A $flA/$n1A $n2A $jA/" baux3.in
                          sed -i "s/$n1C $n2C $flC/$n1C $n2C $jC/" baux3.in
                        else
                          jC=0
                          sed -i "/$n1C $n2C $flC/d" baux3.in
                          sed -i "s/$n1A $n2A $flA/$n1A $n2A $jA/" baux3.in
                          sed -i "s/$n1B $n2B $flB/$n1B $n2B $jB/" baux3.in
                        fi
                        pct=($( awk "BEGIN { print (($jA + $jB + $jC) / $cpd ) * 100 }"))
                        ./Ford_Fulkerson < baux3.in > temp0.dat
                        flw=($(sed -n 's/^total flow is//p' temp0.dat))
                        echo $pct $'\t' $flw >> "$n1A"_"$n2A"-"$n1B"_"$n2B"-"$n1C"_"$n2C".dat
                    fi
                fi
              done < "baux.in"
          fi
        done < "base-aux.in"
    fi
    rm -rf *aux* temp*.dat
  done < "$3"
  paste 1_2-1_3-2_4.dat 1_2-1_3-3_2.dat 1_2-3_2-2_4.dat 1_3-3_2-2_4.dat 1_2-1_3-4_3.dat 1_2-2_4-4_3.dat 1_2-3_2-4_3.dat 1_3-2_4-4_3.dat 1_3-3_2-4_3.dat 3_2-2_4-4_3.dat | column -s $'\t' -tn > networkFlowNested3-"$1"-"$2".dat
}
